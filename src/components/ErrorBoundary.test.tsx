import { describe, it, expect, vi } from 'vitest';\nimport { render, screen } from '../test/test-utils';\nimport ErrorBoundary from './ErrorBoundary';\n\n// Component that throws an error for testing\nconst ThrowError = ({ shouldThrow }: { shouldThrow: boolean }) => {\n  if (shouldThrow) {\n    throw new Error('Test error');\n  }\n  return <div>No error</div>;\n};\n\ndescribe('ErrorBoundary Component', () => {\n  // Suppress console.error for these tests\n  const originalError = console.error;\n  \n  beforeEach(() => {\n    console.error = vi.fn();\n  });\n  \n  afterEach(() => {\n    console.error = originalError;\n  });\n\n  it('renders children when there is no error', () => {\n    render(\n      <ErrorBoundary>\n        <ThrowError shouldThrow={false} />\n      </ErrorBoundary>\n    );\n    \n    expect(screen.getByText('No error')).toBeInTheDocument();\n  });\n\n  it('renders error UI when there is an error', () => {\n    render(\n      <ErrorBoundary>\n        <ThrowError shouldThrow={true} />\n      </ErrorBoundary>\n    );\n    \n    expect(screen.getByText('Something went wrong')).toBeInTheDocument();\n    expect(screen.getByText('Test error')).toBeInTheDocument();\n  });\n\n  it('has refresh and home buttons in error state', () => {\n    render(\n      <ErrorBoundary>\n        <ThrowError shouldThrow={true} />\n      </ErrorBoundary>\n    );\n    \n    expect(screen.getByText('Refresh Page')).toBeInTheDocument();\n    expect(screen.getByText('Go Home')).toBeInTheDocument();\n  });\n});\n