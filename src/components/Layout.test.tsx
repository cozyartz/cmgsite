import { describe, it, expect } from 'vitest';\nimport { render, screen } from '../test/test-utils';\nimport Layout from './Layout';\n\ndescribe('Layout Component', () => {\n  it('renders children correctly', () => {\n    render(\n      <Layout>\n        <div>Test Content</div>\n      </Layout>\n    );\n    \n    expect(screen.getByText('Test Content')).toBeInTheDocument();\n  });\n\n  it('renders header and footer by default', () => {\n    render(\n      <Layout>\n        <div>Content</div>\n      </Layout>\n    );\n    \n    // Assuming Header and Footer have testable content\n    expect(document.querySelector('header')).toBeInTheDocument();\n    expect(document.querySelector('footer')).toBeInTheDocument();\n  });\n\n  it('can hide header when showHeader is false', () => {\n    render(\n      <Layout showHeader={false}>\n        <div>Content</div>\n      </Layout>\n    );\n    \n    expect(document.querySelector('header')).not.toBeInTheDocument();\n  });\n\n  it('can hide footer when showFooter is false', () => {\n    render(\n      <Layout showFooter={false}>\n        <div>Content</div>\n      </Layout>\n    );\n    \n    expect(document.querySelector('footer')).not.toBeInTheDocument();\n  });\n\n  it('applies custom className', () => {\n    const { container } = render(\n      <Layout className=\"custom-class\">\n        <div>Content</div>\n      </Layout>\n    );\n    \n    expect(container.firstChild).toHaveClass('custom-class');\n  });\n});\n